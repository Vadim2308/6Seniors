/**
 * Куки это строки, которые хранятся в браузере, являются частью протокола HTTP
 * Они устанавливаются сервером при помощи заголовка Set-Cookie
 * Затем браузер автоматически добавляет в запросе их в заголовке Cookie
 */

/**
 * Чтение document.cookie
 * Мы можем получить доступ к кукам сайта
 */
{
    alert( document.cookie ); // cookie1=value1; cookie2=value2;..
}

/**
 * Запись в document.cookie
 * document.cookie является свойством аксессором (геттером || сеттером)
 * (!) Запись в куки не обновляет все, а находит только нужную куку
 */
{
    document.cookie = "user=John"; // обновляем только куки с именем 'user'
    alert(document.cookie); // показываем все куки

    //(!) Если есть какие то баги, или множественные куки, то можно для правильного кодирования использовать кодировку
    {
        // специальные символы (пробелы), требуется кодирование
        let name = "my name";
        let value = "John Smith"

        // кодирует в my%20name=John%20Smith
        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);

        alert(document.cookie); // ...; my%20name=John%20Smith
    }
}

/**
 * Ограничения
 * 4кб на 1 куку. При попытке засунуть туда больше, он просто ее не запишет
 * Общее количество куки на один домен ограничивается примерно 20+. Зависит от браузера
 */

{
    const bigCookie = "a".repeat(5000)
    document.cookie = `user=${bigCookie}` // Останется прежняя кука, эта не запишется в cookies
}

/**
 * path
 * Если куки установлено с path=/admin, то оно будет доступно на страницах /admin и /admin/something, но не на страницах /home или /adminpage.
 * path=/ - доступен на всех страницах
 */

/**
 * domain
 * domain=site.com
 * Домен определяет, где доступен файл куки. Но мы не можем указать какой угодно домен
 * (!) Нет никакого способа разрешить доступ к файлам куки из другого домена 2-го уровня, поэтому other.com никогда не получит куки, установленный по адресу site.com.
 */
{
    // По умолчанию куки не передаются поддомену

    // если мы установим файл куки на веб-сайте site.com...
    document.cookie = "user=John"
    // ...мы не увидим его на forum.site.com
    alert(document.cookie); // нет user

    // Но мы можем это исправить. Для этого надо явно установить параметр domain
    // находясь на странице site.com сделаем куки доступным для всех поддоменов *.site.com:
    document.cookie = "user=John; domain=site.com"
    // на forum.site.com
    alert(document.cookie); // есть куки user=John
}

/**
 * expires - устанавливается в формате времени Tue, 19 Jan 2038 03:14:07 GMT
 * max-age - устанавливается в формате секунд
 * Если эти параметры не указаны, то они удалятся при закрытии браузера По другому они называются сессионными.
 */
{
    // +1 день от текущей даты
    let date = new Date(Date.now() + 86400e3);
    date = date.toUTCString();
    document.cookie = "user=John; expires=" + date;

    // куки будет удалено через 1 час
    document.cookie = "user=John; max-age=3600";
}

/**
 * secure
 * Куки следует передавать только по HTTPS-протоколу.
 * По умолчанию куки, установленные сайтом http://site.com, также будут доступны на сайте https://site.com и наоборот.
 */
{
    // предполагается, что сейчас мы на https://
    // установим опцию secure для куки (куки доступно только через HTTPS)
    document.cookie = "user=John; secure";
}

/**
 * samesite
 * XSRF - межсайтовая поддерка запроса.
 * Т.е. находясь на другом сайте, при нажатии на вредоносный скрипт, может отправиться например форма <form action="https://bank.com/pay">, и браузер возьмет куки этого домена, и подставит запрос, в результате чего банк выполнит например транзакцию
 * Для этого генерируется XSRF токен, который включается в заголовки. Когда юзер кликает по ссылку, либо делает запрос, этот токен подставляется в запрос и проверяется на соответствие
 * Этот токен с другой страницы не получится никак сгенерировать, поэтому запрос отвалится
 *
 Если не использовать токен, то в теории можно юзать samesite с определенными настройками. Список смотри в learn.js
 *
 */

/**
 * httpOnly
 * Эта настройка запрещает любой доступ к куки из JavaScript. Мы не можем видеть такое куки или манипулировать им с помощью document.cookie.
 * Устанавливается сервером через Set-Cookie
 */

/**
 * Функция для получения куки по имени
 */
{
    // возвращает куки с указанным name,
// или undefined, если ничего не найдено
    function getCookie(name) {
        let matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }
}

/**
 * setCookie(name, value, options)
 * Устанавливает куки с именем name и значением value, с настройкой path=/
 */

/**
 * deleteCookie(name)
 * Чтобы удалить куки, мы можем установить отрицательную дату истечения срока действия
 */

/**
 * Сторонние куки
 * Например:
 *     Страница site.com загружает баннер с другого сайта: <img src="https://ads.com/banner.png">.
 *     Вместе с баннером удалённый сервер ads.com может установить заголовок Set-Cookie с куки, например, id=1234. Такие куки создаются с домена ads.com и будут видны только на сайте ads.com
 *     В следующий раз при доступе к ads.com удалённый сервер получит куки id и распознает пользователя
 *     Когда юзер с другого сайта запрашивает баннер, то ads.com получит куки, так как они принадлежат ads.com, таким образом ads.com распознает пользователя и может отслеживать его перемещения между сайтам
 */


/**
 * Сторонние куки могут быть запрещены браузером, например Safari делает это по умолчанию.
 * Установка отслеживающих куки пользователям из стран ЕС требует их явного согласия на это в соответствии с законодательством GDPR.
 */