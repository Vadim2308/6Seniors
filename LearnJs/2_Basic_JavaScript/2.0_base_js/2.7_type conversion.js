// Какой результат будет в следующем списке выражений? Проверьте ваши знания о том, как работает приведение типов в JavaScript.
// https://wm-school.ru/js/js_types_conversion.php

true + false // 1 + 0 = 1
8 / "2" // Использование оператора / конвертит операнды к числу. 8/2=4
"number" + 5 + 1 // Т.к. один из операндов строка, идет конкатенация "number51"
5 + 1 + "number" // Сначала складываются операнды 5+1 =6, затем конкатенация со строкой. "6number"
7 && 2 // 2, т.к. оператор && возвращает последнее значение
2 && 7 // 7, т.к. оператор && возвращает последнее значение
null + 1 // null преобразуется к 0. ответ: 1
undefined + 1 //NaN, т.к. Number(undefined) это NaN. А любые операции с NaN это NaN
"five" + + "two" // 'fiveNaN', т.к. +'two' дает NaN, и дальше идет конкат строк
'true' == true // false, т.к. оператор нестрогого равно преобразует операнды к числу. NaN == true => false
false == 'false' // / false, т.к. оператор нестрогого равно преобразует операнды к числу. false == NaN => false
null == '' // false, т.к. null == null || null == undefined, и ничему больше
!!"false" == !!"true" // true
"4" - 3 // 1
"4px" - 3 //NaN
0 || "0" && 1 // 1 (&& возвращает последний трушный операнд либо первый ложный)

"" + 1 + 0 // '10'
'01' == 1 // true, строка '01' становится числом 1
"" - 1 + 0 // -1
"2" * "3" // 6
4 + 5 + "px" //"9px"
"$" + 4 + 5 // '$45'
"4" - 2 // 2
"4px" - 2 // NaN
"  -9  " + 5 // "  -9  5"
"  -9  " - 5 // -14 т.к. при приведении к числу строка триммится, и получается -9-5=-14
null + 1 // 1
undefined + 1 //NaN
" \t \n" - 2 // Пробельные символы (пробелы, знаки табуляции \t, знаки новой строки \n и т. п.) по краям обрезаются. Далее, если остаётся пустая строка, то получаем 0, иначе из непустой строки «считывается» число. 0 - 2 = -2

5 > 4 // true
"ананас" > "яблоко" // false
"2" > "12" // true  (т.к. символ "2" идет после символа "1").
undefined == null // true. При нестрогом равно null == null || null == undefined
undefined === null // false, т.к. разные типы данных
null == "\n0\n" // false, т.к. null == null || null == undefined
null === +"\n0\n" // null === 0 => false