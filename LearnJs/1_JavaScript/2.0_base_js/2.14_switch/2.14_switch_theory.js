/**
 * Конструкция switch заменяет собой сразу несколько if.
 * Имеет один или более блок case и необязательный блок default.
 * Переменная в switch проверяется на СТРОГОЕ равенство со значениями в case
 * Если ни один case не совпал – выполняется (если есть) вариант default.
 * ОБЯЗАТЕЛЬНОЕ использование инструкции break, т.к. выполнение пойдет по всем нижним кейсам, и также попадет в финальный brake
 */

// В case также может находиться выражение.
switch (6) {
    case 5+1:
        console.log("попадет сюда");
        break;
    default:
        console.log("default");
}
// В switch можно делать различный операции, в т.ч. приведение
switch (+'6') {
    case 5+1:
        console.log("попадет сюда");
        break;
    default:
        console.log("default");
}

// Группировка «case»
{
    let a = 3;
    switch (a) {
        case 4:
            console.log('Правильно!');
            break;
        case 3: // (*) группируем оба case
        case 5:
            // При а === 3 || a === 5 попадет сюда. Аналог конструкции без break
            break;
        default:
            console.log('Результат выглядит странновато. Честно.');
    }
}

/**
 * JumpTable
 * Jump table - это оптимизация, которая используется в некоторых компиляторах для генерации кода оператора switch-case.
 * Вместо последовательных переходов для каждого случая, компилятор создает таблицу, где каждому значению case соответствует адрес инструкции, которую нужно выполнить.
 * Когда исполнение доходит до оператора switch-case, компилятор сравнивает значение выражения с каждым значением case в таблице.
 * Если значение соответствует одному из элементов, то компилятор выполняет переход на соответствующий адрес из таблицы, что позволяет значительно ускорить выполнение программы.
 */