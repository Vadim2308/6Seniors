/**
 * В случае obj1 + obj2 || obj1 - obj2 происходит преобразование объектов к примитиву, поэтому результатом таких операций не может быть другой объект
 * 1. Все объекты к приведению к булевому типу (Boolean({})) дают true
 * 2. Числовое преобразование происходит, когда мы вычитаем объекты или применяем математические функции
 * 3. Преобразований к строке – оно обычно происходит, когда мы выводим на экран объект при помощи alert(obj) и в подобных контекстах.
 */
{
    // String
    // вывод
    alert(obj); //[object Object]
    // используем объект в качестве ключа
    anotherObj[obj] = 123;
}
{
    // Number. Для преобразования объекта к числу, в случае математических операций:
    // явное преобразование

    let num = Number(obj);
   // математические (не считая бинарного плюса)
    let n = +obj; // унарный плюс
    let delta = date1 - date2;
    // сравнения больше/меньше
    let greater = user1 > user2;
}

{
    // "default"
    /**
     * Происходит редко, когда оператор «не уверен», какой тип ожидать.
     * Например, бинарный плюс + может работать как со строками (объединяя их в одну), так и с числами (складывая их).
     * Поэтому, если бинарный плюс получает объект в качестве аргумента, он использует хинт "default" для его преобразования.
     * Также, если объект сравнивается с помощью == со строкой, числом или символом, тоже неясно, какое преобразование следует выполнить, поэтому используется хинт "default".
     */
}
{
    // бинарный плюс использует хинт "default"
    let total = obj1 + obj2;

// obj == number использует хинт "default"
    if (user == 1) { ... };
}

/**
 * Алгоритм преобразования таков:
 * Сначала вызывается метод obj[Symbol.toPrimitive](hint), если он существует,
 * В случае, если хинт равен "string" происходит попытка вызвать obj.toString() и obj.valueOf(), смотря что есть.
 * В случае, если хинт равен "number" или "default" происходит попытка вызвать obj.valueOf() и obj.toString(), смотря что есть.
 */