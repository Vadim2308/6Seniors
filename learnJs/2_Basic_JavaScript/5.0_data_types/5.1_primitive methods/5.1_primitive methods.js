/**
 * Есть 7 примитивных типов: string, number, boolean, symbol, null, undefined и bigint.
 * Есть много всего, что хотелось бы сделать с примитивами, такими как строка или число. Было бы замечательно, если бы мы могли обращаться к ним при помощи методов.
 * При обращении к методу примитива создаётся специальный «объект-обёртка», который предоставляет нужную функциональность, а после удаляется.
 * Каждый примитив имеет свой собственный «объект-обёртку», которые называются: String, Number, Boolean, Symbol и BigInt. Таким образом, они имеют разный набор методов.
 */

/**
 * Как работает обращение к методу в примитиве.
 * К примеру, существует метод .toUpperCase()
 */
{
    let str = "Привет";
    alert(str.toUpperCase()); // ПРИВЕТ
}
/**
 * 1. Строка str – примитив. В момент обращения к его свойству, создаётся специальный объект, который знает значение строки и имеет такие полезные методы, как toUpperCase().
 * 2. Этот метод запускается и возвращает новую строку.
 * 3. Специальный объект удаляется, оставляя только примитив str.
 */

/**
 * null/undefined не имеют методов
 * Особенные примитивы null и undefined являются исключениями.
 * У них нет соответствующих «объектов-обёрток», и они не имеют никаких методов. В некотором смысле, они «самые примитивные».
 */

/**
 * Задача 1
 * Можно ли добавить свойство строке?
 */
{
    /**
     * В момент обращения к свойству str создаётся «объект-обёртка».
     * В строгом режиме, попытка изменения этого объекта выдаёт ошибку.
     * Без строгого режима, операция продолжается, записывается свойство test, но после этого обертка удаляется, так что на последней линии str больше не имеет свойства test.
     */
    let str = "Привет";
    str.test = 5;
    alert(str.test);
}

/**
 * 1. примитивы не являются объектами. Они не могут хранить дополнительные данные.
 * 2. Все методы в примитивах иммутабельны. Они не меняют значение в переменной.
 */