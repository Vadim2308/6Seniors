/**
 * –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ (–∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ) –æ–±—ä–µ–∫—Ç—ã ‚Äì —ç—Ç–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç –≤ —Ü–∏–∫–ª–µ for..of.
 * –ú–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä: for..of Array.from spread, –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ, yield
 * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–∏–∫–ª for of –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–∑–≤–∞—Ç—å —Ü–∏–∫–ª –Ω–∞ –Ω–µ–∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–º –æ–±—ä–µ–∫—Ç–µ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É "obj" is not iterable
 * –ò—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞ —Ä–∞–∑, –ø—Ä–∏ —ç—Ç–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è —Å–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
 */

/**
 * –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ–∑–¥–µ, –≥–¥–µ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–±–æ—Ä, –æ–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –º–∞—Å—Å–∏–≤—ã, –Ω–æ –∏ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.
 * –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è ¬´–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö¬ª (iterable) –æ–±—ä–µ–∫—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä Map, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ ES6.
 * –¢–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –∫–∞–∫ String, Array, Map –∏ Set —è–≤–ª—è—é—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∞—Ç Symbol.iterator.
 */

/**
 * –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º, –Ω—É–∂–Ω–æ:
 *  1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ Symbol.iterator (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Symbol, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞–∫ —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ).
 *  2. –¶–∏–∫–ª for of –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑, –∏ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º next(). –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º".
 *  3. –î–∞–ª—å—à–µ for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
 *  4. –ö–æ–≥–¥–∞ for..of —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ next() —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
 *  5. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ next() –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ {done: Boolean, value: any}, –≥–¥–µ done=true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ value —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
 */

{
    let range = {
        from: 1,
        to: 5
    };
    // 1. –≤—ã–∑–æ–≤ for..of —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    range[Symbol.iterator] = function() {
        // ...–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞:
        // 2. –î–∞–ª–µ–µ, for..of —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –Ω–µ–≥–æ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return {
            current: this.from,
            last: this.to,
            // 3. next() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for..of
            next() {
                // 4. –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ {done:.., value :...}
                if (this.current <= this.last) {
                    return { done: false, value: this.current++ };
                } else {
                    return { done: true };
                }
            }
        };
    };
    for (let num of range) {
        console.log(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
    }
}
/**
 * –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å 
 */
{
    let range = {
        from: 1,
        to: 5,
        [Symbol.iterator]() {
            this.current = this.from;
            return this; // Symbol.iterator –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º next(), –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç
        },
        next() {
            if (this.current <= this.to) {
                return { done: false, value: this.current++ };
            } else {
                return { done: true };
            }
        }
    };

    for (let num of range) {
        console.log(num); // 1, –∑–∞—Ç–µ–º 2, 3, 4, 5
    }
}

{
    function makeIterator(array) {
        let nextIndex = 0
        return {
            next: function () {
                if (nextIndex < array.length) {
                    const result = { value: array[nextIndex], done: false }
                    nextIndex++
                    return result
                } else {
                    return { done: true }
                }
            }
        }
    }
    // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±—ä–µ–∫—Ç-–∏—Ç–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —è–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, —Å –ø–æ–º–æ—â—å—é –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–∞ next():
    let iterator = makeIterator(['Hello', 'world'])
    console.log(iterator.next().value)
    // 'Hello'
    console.log(iterator.next().value)
    // 'world'
    console.log(iterator.next().done)
    // true
}


/**
 * –°—Ç—Ä–æ–∫–∞ ‚Äì –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
 */
{
    for (let char of "test") {
        // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 4 —Ä–∞–∑–∞: –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        console.log(char); // t, –∑–∞—Ç–µ–º e, –∑–∞—Ç–µ–º s, –∑–∞—Ç–µ–º t
    }
    let str = 'ùí≥üòÇ';
    for (let char of str) {
        console.log(char); // ùí≥, –∞ –∑–∞—Ç–µ–º üòÇ
    }
}

/**
 * –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
 * –¢–∞–∫–æ–µ —Ä–µ–¥–∫–æ –±—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –Ω–æ —ç—Ç–æ –¥–∞—ë—Ç –Ω–∞–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º, —á–µ–º for..of.
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –º—ã –º–æ–∂–µ–º —Ä–∞–∑–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏: –ø–µ—Ä–µ–±—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë –∏ –ø–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
 */
{
    let str = 'Hello';

    // –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏
    // for (let char of str) console.log(char);
    let iterator = str[Symbol.iterator]();
    while (true) {
        const { value, done } = iterator.next();
        console.log({ value, done }); // –≤—ã–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
        if (done) break;
    }
}

/**
 * –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã
 *    –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ Symbol.iterator.
 *    –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length, —Ç–æ –µ—Å—Ç—å, –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã. –ù–æ —Ç.–∫. —ç—Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±—ä–µ–∫—Ç—ã, –∏—Ö –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –Ω–µ–ª—å–∑—è –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ Symbol.Iterator
 *    –ü—Ä–∏–º–µ—Ä—ã –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–æ–≤ - HTMLCollection,NodeList,CSSRuleList
 */
{
    let arrayLike = { // –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length => –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤
        0: "Hello",
        1: "World",
        length: 2
    };
    // –û—à–∏–±–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Symbol.iterator)
        for (let item of arrayLike) {}
}
/**
 * Array.from()
 * –ï—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Array.from, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤ –∏ –¥–µ–ª–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ ¬´–Ω–∞—Å—Ç–æ—è—â–∏–π¬ª Array.
 * –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —É–∂–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤, –ª–∏–±–æ –æ–±—ä–µ–∫—Ç —Å Symbol.iterator. —Å–º –æ–±—ä–µ–∫—Ç range
 */
{
    let arrayLike = {
        0: "Hello",
        1: "World",
        length: 2
    };
    let arr = Array.from(arrayLike); // (*)
    console.log(arr.pop()); // World (–º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç)

    let arr2 = Array.from(arrayLike, (str,idx) => str + idx);
    console.log(arr2); //["Hello0", "World1"]

    let str = 'ùí≥üòÇ';

     // —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –µ—ë —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    let chars = Array.from(str); // ["ùí≥", "üòÇ"]
    console.log(chars[0]); // ùí≥
    console.log(chars[1]); // üòÇ
    console.log(chars.length); // 2
}

/**
 * –°–ø—Ä–µ–¥-–æ–ø–µ—Ä–∞—Ç–æ—Ä
 * –°–ø—Ä–µ–¥-–æ–ø–µ—Ä–∞—Ç–æ—Ä (spread) —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
 */
{
    const arr = [...new Set(['a', 'b', 'c'])]
    // ['a', 'b', 'c']
}
