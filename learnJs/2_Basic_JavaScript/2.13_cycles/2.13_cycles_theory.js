/**
 * Циклы предназначены для многократного повторения одного участка кода
 * Этим они и отличаются от конструкции switch/case
 */

/**
 * while
 */
let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
    console.log(i);
    i++;
}
let j = 3
while (j) { // выводит 3, затем 2, затем 1
    console.log(j);
    j--;
}

/**
 * do...while
 * Необходимо для выполнения тела цикла хотя б 1 раз
 */

let k = 0;
do {
    console.log(k);
    k++;
} while (k < 3);

/**
 * for
 * for (начало; условие; шаг) {тело}
 * 1. начало: Выполняется один раз при входе в цикл
 * 2. условие: Проверяется перед каждой итерацией цикла. Если оно вычислится в false, цикл остановится.
 * 3. тело: Выполняется снова и снова, пока условие вычисляется в true.
 * 4. шаг: 	Выполняется после тела цикла на каждой итерации перед проверкой условия.
 */

// Встроенное объявление переменной
for (let i = 0; i < 3; i++) {
    console.log(i); // 0, 1, 2
}
console.log(i); // ошибка, нет такой переменной

// Уже существующая переменная
let n = 0;
for (n; n < 3; n++) { // используем существующую переменную
    console.log(n); // 0, 1, 2
}
console.log(n); // 3, переменная доступна, т.к. была объявлена снаружи цикла

/**
 * Пропуск частей.
 * ЛЮБАЯ ЧАСТЬ может быть пропущена
 */
{
    let i = 0; // мы уже имеем объявленную i с присвоенным значением
    for (; i < 3; i++) { // нет необходимости в "начале"
        alert( i ); // 0, 1, 2
    }
}
{
    let i = 0;
    for (; i < 3;) {
       i++
    } // Аналог while(i<3){i++}
}
{
    // for (;;) {
    //     // будет выполняться вечно
    // }
}
/**
 * Прерывание цикла
 * break => прерывает текущую итерацию и выходит из цикла
 * continue => прерывает текущую итерацию и переходит к следующей.
 * Ограничения continue:
 *  1. Нельзя использовать break/continue справа от оператора „?“ (синтаксическая ошибка)
 */
{
    for (let i = 0; i < 10; i++) {
        // если true, пропустить оставшуюся часть тела цикла
        if (i % 2 === 0) {
            console.log('asd')
        } else {
            continue
        }
        let tes2 = 4
        // console.log(i); // 1, затем 3, 5, 7, 9
    }
}
/**
 * Метки в цикле нужны чтоб можно было выйти одновременно из нескольких уровней сразу
 */
{
    outer: for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            console.log(`Значение на координатах (${i},${j})`);
            // если пустая строка или Отмена, то выйти из обоих циклов
            if(i === 0 && j === 2) break outer // (*) Таким образом управление перейдёт со строки, помеченной (*), к alert('Готово!').
            // сделать что-нибудь со значениями...
        }
    }
    alert('Готово!');
}
//Директива continue также может быть использована с меткой. В этом случае управление перейдёт на следующую итерацию цикла с меткой.